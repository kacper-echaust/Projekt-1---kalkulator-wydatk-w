
kolo ma sie zapelniac rowno z wydatkami procentowo i zmieniac kolor 
usuwanie wydatkow







błędy
kolo ma sie ladowac od 0 przy starcie strony
function renderExpenses() {
	containerListOfExpenses.innerHTML = '' //żeby nie dodawały sie za kazdym razem kategorie

	// <div>
	// <p>Categoria 1:</p>
	// <ul>
	//   <li> - 100zl</li>
	//   <li> - 200zl</li>
	// </ul>
	// <strong> Suma: 300zl</strong>
	// </div>

	// Categoria 2:
	//   - 50zl
	//   - 30zl
	//   - 100zl
	//   Suma: 180zl

	// Categoria 3:
	//   Suma: 0zl

	categories.forEach(function (category) {
		// category -> categories[i]

		const div = document.createElement('div')
		const p = document.createElement('p')
		const strong = document.createElement('strong')
		const ul = document.createElement('ul')
		containerListOfExpenses.appendChild(div)
		div.appendChild(p)
		div.appendChild(ul)
		div.appendChild(strong)
		p.textContent = category.name

		// id = 1, i = 0
		//

		const filteredExpanses = state.expanses.filter(function (expanse) {
			// expanse -> state.expanses[i]
			// jezeli return true -> expanse trafia do tablicy filteredExpanses
			// jezeli return false -> expanse NIE trafia do tablicy filteredExpanses

			if (category.id == expanse.id) {
				return true
			}

			return false
		})

		filteredExpanses.forEach(function (expanse) {
			const li = document.createElement('li')
			ul.appendChild(li)
			li.textContent = `${expanse.amount}zl`
		})

		const sumOfExpansesInCategory = filteredExpanses.reduce(function (sum, expanse) {
			return sum + expanse.amount
		}, 0)

		strong.textContent = `${sumOfExpansesInCategory} zł`

		// reduce
		// i = 0, sum = ?, return sum + 15
		// i = 1, sum = 15, return sum + 10
		// i = 2, sum = 25, return sum + 5
	})
	renderIncome()
}